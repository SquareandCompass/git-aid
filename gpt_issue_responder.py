"""
This script uses the OpenAI gpt-4 model to generate responses to GitHub issues and posts them as comments.
It requires the following environment variables to be set:

- GITHUB_READWRITE_TOKEN: GitHub personal access token with repo scope permissions.
- OPENAI_API_KEY: OpenAI API key for using the gpt-4 model.

Dependencies:

- requests: For making HTTP requests to the GitHub API.
- openai: For using the OpenAI gpt-4 model.

Functions:

- get_latest_issues: Fetches the latest issues from the specified GitHub repository.
- generate_gpt4_response: Generates a gpt-4 response based on the provided prompt.
- post_github_comment: Posts a comment on the specified GitHub issue.
- main: Entry point of the script.
"""

import os
import json
import time
import requests
import openai
from dotenv import load_dotenv
import logging

# Load environment variables from .env file
load_dotenv()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)

GITHUB_READWRITE_TOKEN = os.getenv("GITHUB_READWRITE_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

def get_latest_issues(repo_owner, repo_name):
    """
    Fetches the latest issues from the specified GitHub repository.
    Args:
        repo_owner (str): The owner of the GitHub repository.
        repo_name (str): The name of the GitHub repository.

    Returns:
        list: A list of issue dictionaries containing issue data.

    Raises:
        Exception: If there's an error fetching issues from the GitHub API.
    """
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues"
    headers = {"Authorization": f"token {GITHUB_READWRITE_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch issues: {response.content}")
    
def get_issue_comments(repo_owner, repo_name, issue_number):
    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}/comments"
    headers = {"Authorization": f"token {GITHUB_READWRITE_TOKEN}"}
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch comments: {response.content}")
    
def generate_gpt4_response(prompt):
    """
    Generates a gpt-4 response based on the provided prompt.
    Args:
        prompt (str): The input prompt for the gpt-4 model.

    Returns:
        str: The generated gpt-4 response text.
    """

    messages = [
        {
            "role": "system",
            "content": """You are AI-GitHub-Issue-Helper.\nYour job is to take in a GitHub issue from the user and respond.""",
        },
        {"role": "user", "content": prompt},
    ]

    logging.info(f"Generating response for prompt: {prompt}")

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        # temperature=temperature,
        # max_tokens=max_tokens
    )

    return response.choices[0].message["content"]

def post_github_comment(repo_owner, repo_name, issue_number, body):
    """
    Posts a comment on the specified GitHub issue.
    Args:
        repo_owner (str): The owner of the GitHub repository.
        repo_name (str): The name of the GitHub repository.
        issue_number (int): The number of the GitHub issue.
        body (str): The text content of the comment.

    Raises:
        Exception: If there's an error posting the comment to the GitHub API.
    """
    disclaimer = "\n\n---\n\n*This response was generated by [AI-GitHub-Interlocutor](https://github.com/Torantulino/AGI) and may not be accurate or appropriate. The author of this repository and the creator of the AI model assume no responsibility or liability for any consequences arising from the use of the information provided in this response. ðŸ¤–*"
    # Append disclaimer to the comment
    body += disclaimer

    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}/comments"
    headers = {"Authorization": f"token {GITHUB_READWRITE_TOKEN}"}
    data = {"body": body}

    response = requests.post(url, headers=headers, json=data)

    if response.status_code == 201:
        logging.info(f"Comment posted on issue {issue_number}")
    else:
        raise Exception(f"Failed to post comment: {response.content}")
    
def main():
    """
    Entry point of the script.
    Fetches the latest issues from the specified GitHub repository,
    generates GPT-4 responses for each issue, and posts them as comments.
    """
    repo_owner = "Torantulino"
    repo_name = "AI-Github-Interlocutor"

    try:
        issues = get_latest_issues(repo_owner, repo_name)
        logging.info(f"Found {len(issues)} issues")
        for issue in issues:
            # Get all comments for the current issue
            comments = get_issue_comments(repo_owner, repo_name, issue["number"])

            # Check if the bot has already commented on this issue
            bot_already_commented = any(
                [True for comment in comments if comment["user"]["login"] == repo_owner]
            )

            if not bot_already_commented:
                # Concatenate the issue body and all comments
                full_text = issue["body"] + "\n\n".join(
                    [comment["body"] for comment in comments]
                )

                prompt = f"GitHub issue: {issue['title']}\n {full_text}"
                response = generate_gpt4_response(prompt)
                post_github_comment(repo_owner, repo_name, issue["number"], response)
            else:
                logging.info(f"Bot already commented on issue {issue['number']}")
    except Exception as e:
        logging.error(f"Error: {str(e)}")

if __name__ == "__main__":
    main()